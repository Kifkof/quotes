@inject QuotesContext QuotesContext
<Container Fluid>
    <Validations @ref="validations" Model="@authorCreation" Mode="ValidationMode.Manual">
        <Validation>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <FieldBody>
                    <MemoEdit Rows="2" @bind-Text="authorCreation.Name" Placeholder="Name eingeben">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </MemoEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation Validator="ValidatePhoto">
            <Field>
                <FieldLabel>Portrait</FieldLabel>
                <FieldBody>
                    <FileEdit Changed="@OnChanged" DisableProgressReport Filter="image/*" Placeholder="Photo auswählen">
                        <Feedback>
                            <ValidationError>@fileValidationError</ValidationError>
                        </Feedback>
                    </FileEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Button Color="Color.Primary" Clicked="@CreateAuthor">Hinzufügen</Button>
    </Validations>
</Container>
@code {
    private Validations? validations;
    private AuthorCreation authorCreation = new AuthorCreation();
    private FileCreation fileCreation = new FileCreation();
    private string fileValidationError;
    private readonly static string FileIsToLarge = "Bild ist zu gross";
    private readonly static string FileIsRequired = "Bild ist erforderlich";
    private readonly static int TwoMB = 2000000;

    private async Task CreateAuthor()
    {
        if (await validations.ValidateAll())
        {
            var file = new File
                {
                    Id = Guid.NewGuid(),
                    Base64Data = fileCreation.Base64Data,
                    Name = fileCreation.Name,
                    FileType = fileCreation.FileType
                };
            QuotesContext.Add(file);
            QuotesContext.Add(new Author
                {
                    Id = Guid.NewGuid(),
                    Name = authorCreation.Name,
                    FileId = file.Id
                });
            await QuotesContext.SaveChangesAsync();
        }
    }

    private void ValidatePhoto(ValidatorEventArgs e)
    {
        if (e.Value == null)
        {
            fileValidationError = FileIsRequired;
        }
        e.Status = string.IsNullOrEmpty(fileValidationError) ? ValidationStatus.Success : ValidationStatus.Error;
    }


    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if (file == null)
            {
                return;
            }
            if (file.Size > TwoMB)
            {
                fileValidationError = FileIsToLarge;
                return;
            }

            using var stream = new MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);
            stream.Seek(0, SeekOrigin.Begin);
            fileCreation = new FileCreation
                {
                    Name = file.Name,
                    Base64Data = Convert.ToBase64String(stream.ToArray()),
                    FileType = file.Type
                };
            fileValidationError = "";
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

}
