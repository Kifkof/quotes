@inject QuotesContext QuotesContext
<Container Fluid>
    <Validations @ref="validations" Model="@quoteCreation" Mode="ValidationMode.Manual">
        <Validation>
            <Field>
                <FieldLabel>Zitat</FieldLabel>
                <FieldBody>
                    <MemoEdit Rows="2" @bind-Text="quoteCreation.Text" Placeholder="Zitat eingeben">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </MemoEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation>
            <Field>
                <FieldLabel>Tag des Zitates</FieldLabel>
                <FieldBody>
                    <DatePicker TValue="DateTime?" @bind-Date="quoteCreation.DateOfQuote" Placeholder="Tag auswählen">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </DatePicker>
                </FieldBody>
            </Field>
        </Validation>
        <Validation>
            <Field>
                <FieldLabel>Author</FieldLabel>
                <FieldBody>
                    <Select @bind-SelectedValue="quoteCreation.AuthorId">
                        <ChildContent>
                            <SelectItem Disabled>Author auswählen</SelectItem>
                            @foreach (var author in authors)
                            {
                                <SelectItem Value="@author.Id">@author.Name</SelectItem>
                            }
                        </ChildContent>
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </Select>
                </FieldBody>
            </Field>
        </Validation>
        <Button Color="Color.Primary" Clicked="@CreateQuote">Hinzufügen</Button>
    </Validations>
</Container>
@code {
    private Validations? validations;
    private QuoteCreation quoteCreation = new QuoteCreation();
    private IEnumerable<Author> authors;
    protected override void OnInitialized()
    {
        authors = QuotesContext.Authors.ToList();
        StateHasChanged();
    }

    private async Task CreateQuote()
    {
        if (await validations.ValidateAll())
        {
            QuotesContext.Add(new Quote
                {
                    Text = quoteCreation.Text,
                    AuthorId = quoteCreation.AuthorId.Value,
                    DateOfQuote = quoteCreation.DateOfQuote.Value,
                    Id = Guid.NewGuid(),
                });
            await QuotesContext.SaveChangesAsync();
        }
    }
}